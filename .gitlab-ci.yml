---
include:
  template: Security/SAST.gitlab-ci.yml
stages:
- test
- build
- autopkgtest
- docker-pre
- docker
- docker-post
#- dockertest
- release

.build: &build
  stage: test
  services:
  - postgres:9.6
  - name: minio/minio:latest
    command:
    - server
    - /data
  variables:
    POSTGRES_DB: sreview
    POSTGRES_USER: sreview
    POSTGRES_PASSWORD: ""
    POSTGRES_HOST_AUTH_METHOD: trust
    SREVIEWTEST_DB: sreview;host=postgres;user=sreview
    SREVIEWTEST_S3_CONFIG: '{"default":{"aws_access_key_id":"minioadmin","aws_secret_access_key":"minioadmin","secure":0,"host":"minio-minio:9000"}}'
    SREVIEWTEST_BUCKET: 'test'
    SREVIEW_COMMAND_TUNE: '{"bs1770gain":"0.5","inkscape":"0.9"}'
    JUNIT_OUTPUT_FILE: junit_output.xml 
    SCAN_KUBERNETES_MANIFESTS: "true"
  image: $CI_JOB_NAME
  before_script:
  - apt-get update; apt-get -y --no-install-recommends install inkscape ffmpeg bs1770gain
  - cpanm ExtUtils::Depends Devel::Cover TAP::Harness::JUnit
  - cpanm --notest --installdeps .
  - perl Makefile.PL
  - perl .ci/setup-minio.pl
  script:
  - cover -delete
  - HARNESS_PERL_SWITCHES='-MDevel::Cover' prove -v -l --harness TAP::Harness::JUnit
  - cover
  artifacts:
    paths:
    - cover_db
    reports:
      junit: junit_output.xml
  tags:
  - docker

perl:latest:
  <<: *build

perl:5.28:
  <<: *build

test:committed:
  stage: test
  image: perl:latest
  before_script:
  - apt-get update; apt-get -y --no-install-recommends install git
  - cpanm ExtUtils::Depends
  - cpanm --notest --installdeps .
  - perl Makefile.PL
  script:
  - make manifest
  - git diff --exit-code

.deb: &deb
  stage: build
  image: $CI_JOB_NAME
  before_script:
  - apt-get update; apt-get -y --no-install-recommends install devscripts equivs git build-essential
  - mk-build-deps -r -i -t "apt-get -y -o Debug::pkgProblemResolver=yes --no-install-recommends"
  - DIST=${CI_JOB_NAME#*:}
  - VERSION=$(git describe|sed -e 's/^v//g')-0
  - DEBEMAIL="gitlab-runner auto build <nowhere@nowhere>" dch --distribution $DIST -v $VERSION --no-auto-nmu "gitlab automatic snapshot build for $DIST of $VERSION"
  script:
  - dpkg-buildpackage -us -uc -i -I.git
  after_script:
  - mkdir products
  - dcmd mv ../*ges products/
  - echo "GIT_DESCRIBE=$(git describe)" > dot.env
  artifacts:
    paths:
    - products
    reports:
      dotenv: dot.env
  tags:
  - docker

#debian:stable:
#  <<: *deb
debian:testing:
  <<: *deb
  allow_failure: true

debian:unstable:
  <<: *deb
  allow_failure: true

.docker: &docker
  stage: docker
  dependencies:
  - debian:testing
  services:
  - docker:dind
  image: docker:latest
  tags:
  - docker
  before_script:
  - export IMAGE_TAG=$CI_REGISTRY_IMAGE/${CI_JOB_NAME#*:}:$CI_COMMIT_REF_SLUG
  - cp products/*deb dockerfiles/${CI_JOB_NAME#*:}
  - docker info
  - docker pull $IMAGE_TAG || true
  script:
  - cd dockerfiles/${CI_JOB_NAME#*:}
  - sed -i -e "s/@git_describe@/$GIT_DESCRIBE/g" Dockerfile
  - docker build --build-arg=ci_registry_image=$CI_REGISTRY_IMAGE --build-arg=ci_commit_ref_slug=$CI_COMMIT_REF_SLUG --cache-from $CI_REGISTRY_IMAGE/master:$CI_COMMIT_REF_SLUG --cache-from $IMAGE_TAG --pull -t $IMAGE_TAG .
  after_script:
  - export IMAGE_TAG=$CI_REGISTRY_IMAGE/${CI_JOB_NAME#*:}:$CI_COMMIT_REF_SLUG
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker push $IMAGE_TAG

docker:common:
  <<: *docker
  stage: docker-pre
  needs:
  - debian:testing

docker:encoder:
  <<: *docker
  needs:
  - debian:testing
  - docker:common

docker:detect:
  <<: *docker
  needs:
  - debian:testing
  - docker:common

docker:master-kube:
  <<: *docker
  stage: docker-post
  needs:
  - debian:testing
  - docker:master
  - docker:common

docker:master:
  <<: *docker
  needs:
  - debian:testing
  - docker:common

docker:web:
  <<: *docker
  needs:
  - debian:testing
  - docker:common

helm:build:
  stage: build
  image:
    name: alpine/helm
    entrypoint: [""]
  allow_failure: true
  before_script:
  - cd helm
  - helm dependency update sreview
  - cd ..
  script:
  - VERSION=$(grep ^version helm/sreview/Chart.yaml|cut -d ' ' -f 2)
  - cd helm
  - helm package sreview
  - cd ..
  - mkdir -p products/helm
  - mv helm/sreview-$VERSION.tgz products/helm
  - echo $VERSION > products/helm/version.txt
  artifacts:
    paths:
    - products/helm
  only:
    changes:
    - helm/**/*

release:helm:
   stage: release
   image: debian:stable
   allow_failure: true
   dependencies:
   - helm:build
   before_script:
   - apt-get update
   - apt-get -y install curl
   script:
   - VERSION=$(cat products/helm/version.txt)
   - curl --request POST --user gitlab-ci-token:$CI_JOB_TOKEN --form "chart=@products/helm/sreview-$VERSION.tgz" "${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/packages/helm/api/dev/charts"
   only:
     changes:
     - helm/**/*

.drelease: &drelease
  stage: release
  when: manual
  services:
  - docker:dind
  image: docker:latest
  tags:
  - docker
  script:
  - docker pull $CI_REGISTRY_IMAGE/${CI_JOB_NAME#*:}:$CI_COMMIT_REF_SLUG
  - docker tag $CI_REGISTRY_IMAGE/${CI_JOB_NAME#*:}:$CI_COMMIT_REF_SLUG $CI_REGISTRY_IMAGE/${CI_JOB_NAME#*:}:latest
  - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  - docker push $CI_REGISTRY_IMAGE/${CI_JOB_NAME#*:}:latest

release:encoder:
  <<: *drelease

release:master:
  <<: *drelease

release:master-kube:
  <<: *drelease

release:web:
  <<: *drelease
  
release:detect:
  <<: *drelease

pages:
  stage: release
  dependencies:
  - debian:testing
  script:
  - mkdir public
  - apt-get update; apt-get -y --no-install-recommends install devscripts
  - dcmd cp products/*.changes public/
  - for i in public/*.deb; do ln -s $(basename $i) ${i%_${i#*_}}.deb; done
  artifacts:
    paths:
    - public
  only:
  - main
  needs:
  - debian:testing

.dput: &dput
  stage: release
  image: debian:stable
  allow_failure: true
  before_script:
  - apt-get update
  - apt-get -y install dput-ng
  - echo -e "[gitlab]\nmethod=https\nfqdn=https://gitlab-runner:$CI_JOB_TOKEN@$CI_SERVER_HOST\nincoming=/api/v4/projects/$CI_PROJECT_ID/packages/debian\n" > dput.cf
  script:
  - dput --config=dput.cf --unchecked --no-upload-log gitlab products/*.changes

dput:testing:
  <<: *dput
  dependencies:
  - debian:testing

dput:unstable:
  <<: *dput
  dependencies:
  - debian:unstable

validate:package:
  image: debian:testing
  dependencies:
  - debian:testing
  needs:
  - debian:testing
  stage: autopkgtest
  services:
  - postgres:latest
  - name: minio/minio:latest
    command:
    - server
    - /data
  variables:
    POSTGRES_DB: sreview
    POSTGRES_USER: sreview
    POSTGRES_PASSWORD: ""
    POSTGRES_HOST_AUTH_METHOD: trust
    SREVIEWTEST_DB: 'sreview;host=postgres;user=sreview'
    SREVIEWTEST_INSTALLED: 1
    SREVIEWTEST_S3_CONFIG: '{"default": {"aws_access_key_id": "minioadmin", "aws_secret_access_key":"minioadmin","secure":0,"host":"minio-minio:9000"}}'
    SREVIEWTEST_BUCKET: 'test'
  before_script:
  - apt-get update; apt-get -y --no-install-recommends install libnet-amazon-s3-perl libmojolicious-perl
  - perl .ci/setup-minio.pl
  - apt-get --purge -y remove libnet-amazon-s3-perl libmojolicious-perl
  - apt-get --purge -y autoremove
  - apt-get -y install autopkgtest
  script:
  - autopkgtest products/*ges -- null

#validate:web:
#  allow_failure: true
#  stage: dockertest
#  services:
#  - name: postgres:latest
#    alias: postgresql
#  - name: $CI_REGISTRY_IMAGE/web:$CI_COMMIT_REF_SLUG
#    alias: web
#  variables:
#    POSTGRES_USER: sreview
#    POSTGRES_DB: sreview
#    POSTGRES_PASSWORD: ""
#    POSTGRES_HOST_AUTH_METHOD: trust
#    SREVIEW_DBISTRING: '"dbi:Pg:dbname=sreview;host=postgresql;user=sreview"'
#    SREVIEW_ADMINUSER: '"test@example.com"'
#    SREVIEW_ADMINPW: '"foo"'
#    SREVIEW_URLBASE: '"http://web:8080/"'
#  image: $CI_REGISTRY_IMAGE/encoder:$CI_COMMIT_REF_SLUG
#  script:
#  - perl -I lib dockerfiles/tests/test.pl
