---
# Before deploying, change the configuration in this ConfigMap and the
# Secret up next to something that suits your environment.
apiVersion: v1
kind: ConfigMap
metadata:
  name: sreview-config
data:
# For a list of possible values, run "sreview-config -a dump", which is
# a binary found in any of the SReview containers.
#
# To transform the names of variables as reported by sreview-config,
# transform them to upper case and prepend the literal string SREVIEW_
# to them.
#
# The values should be encoded as JSON. This includes plain string
# values, which should be double-quoted (i.e., use '"foo"' if you want
# the string `foo` to be used), otherwise they're not JSON strings after
# the YAML parsing.
#
# You may add or remove as many variables as you like here, but note
# that the SREVIEW_DBISTRING, SREVIEW_SECRET, and SREVIEW_ADMINPW values
# are set in the "Secret", below.
  SREVIEW_ADMINUSER: '"w@uter.be"'
  SREVIEW_EVENT: '"test"'
  SREVIEW_ANONREVIEWS: '1'
  SREVIEW_URLBASE: '"http://sreview.example.com"'
# Store these as "/mnt/vda1/inputdata/assets/preroll.svg and .../postroll.png on
# minikube
  SREVIEW_PREROLL_TEMPLATE: '"/srv/sreview/incoming/assets/preroll.svg"'
  SREVIEW_POSTROLL: '"/srv/sreview/incoming/assets/postroll.png"'
---
apiVersion: v1
kind: Secret
metadata:
  name: sreview-secret
type: Opaque
stringData:
# DO NOT remove these. They are assumed to always exist by the stuff
# below.
#
# If you don't want an admin user to be created upon first load of the
# webapp, then remove the SREVIEW_ADMINUSER variable above. Removing the
# "adminpw" value below will make things fail.
  adminpw: '"qsdf"'
  dbpass: '<SREVIEW_DATABASE_PASSWORD>'
  dbistring: '"dbi:Pg:dbname=sreview;host=sreview-database;user=sreview;password=<SREVIEW_DATABASE_PASSWORD>"'
  websecret: '"qsudbvqosfdq√πmlkigjqsdloh,cosiucvhsnlqgfqwsdbnfliyqb"'
---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: sreview-database
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sreview-database
  serviceName: "sreview-database"
  template:
    metadata:
      labels:
        app: sreview-database
    spec:
      containers:
      - name: postgres
        image: postgres:latest
        env:
        - name: PGDATA
          value: "/var/lib/postgresql/data/db"
        - name: POSTGRES_USER
          value: sreview
        - name: POSTGRES_DB
          value: sreview
        - name: POSTGRES_PASSWORD
          valueFrom:
            secretKeyRef:
              name: sreview-secret
              key: dbpass
        ports:
        - containerPort: 5432
          name: postgresql
        volumeMounts:
        - mountPath: "/var/lib/postgresql/data"
          name: "postgresdata"
      volumes:
      - name: "postgresdata"
        persistentVolumeClaim:
          claimName: "postgresdata"
---
apiVersion: v1
kind: Service
metadata:
  name: sreview-database
  labels:
    app: sreview-database
spec:
  ports:
  - port: 5432
    name: postgresql
  clusterIP: None
  selector:
    app: sreview-database
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sreview-web
spec:
  replicas: 3
  selector:
    matchLabels:
      app: sreview-web
  template:
    metadata:
      labels:
        app: sreview-web
    spec:
      containers:
      - name: web
        image: registry.salsa.debian.org/debconf-video-team/sreview/web:latest
        env:
        - name: SREVIEW_DBISTRING
          valueFrom:
            secretKeyRef:
              name: sreview-secret
              key: dbistring
        - name: SREVIEW_SECRET
          valueFrom:
            secretKeyRef:
              name: sreview-secret
              key: websecret
        - name: SREVIEW_ADMINPW
          valueFrom:
            secretKeyRef:
              name: sreview-secret
              key: adminpw
        envFrom:
        - configMapRef:
            name: sreview-config
---
apiVersion: v1
kind: Service
metadata:
  name: sreview-web
spec:
  type: NodePort
  selector:
    app: sreview-web
  ports:
  - name: http
    protocol: TCP
    port: 80
    targetPort: 8080
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: sreview-master
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: manage-jobs
rules:
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "watch", "list"]
- apiGroups: ["batch", "extensions"]
  resources: ["jobs"]
  verbs: ["get", "list", "watch", "create", "update", "patch", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: manage-jobs
subjects:
- kind: ServiceAccount
  name: sreview-master
  apiGroup: ""
roleRef:
  kind: Role
  name: manage-jobs
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sreview-master
spec:
  replicas: 1
  selector:
    matchLabels:
      app: sreview-master
  template:
    metadata:
      labels:
        app: sreview-master
    spec:
      serviceAccountName: sreview-master
      containers:
      - name: master
        image: registry.salsa.debian.org/debconf-video-team/sreview/master-kube
        env:
        - name: SREVIEW_DBISTRING
          valueFrom:
            secretKeyRef:
              name: sreview-secret
              key: dbistring
        envFrom:
        - configMapRef:
            name: sreview-config
        volumeMounts:
        - mountPath: "/srv/sreview/incoming"
          name: "inputdata"
      volumes:
      - name: "inputdata"
        persistentVolumeClaim:
          claimName: "inputdata"
---
apiVersion: batch/v1beta1
kind: CronJob
metadata:
  name: detect
spec:
  concurrencyPolicy: Forbid
  schedule: 0,30 * * * *
  jobTemplate: 
    metadata:
      labels:
        app: sreview-detect
    spec:
      template:
        metadata:
          labels:
            app: sreview-detect
        spec:
          restartPolicy: Never
          containers:
          - name: detect
            image: registry.salsa.debian.org/debconf-video-team/sreview/master-kube
            command: ["/usr/bin/sreview-detect"]
            env:
            - name: SREVIEW_DBISTRING
              valueFrom:
                secretKeyRef:
                  name: sreview-secret
                  key: dbistring
            envFrom:
            - configMapRef:
                name: sreview-config
            volumeMounts:
            - mountPath: "/srv/sreview/incoming"
              name: "inputdata"
          volumes:
          - name: "inputdata"
            persistentVolumeClaim:
              claimName: "inputdata"
