#!/usr/bin/perl -w

use strict;
use warnings;

use SReview::Config::Common;
use SReview::Talk;
use SReview::Template;
use YAML::XS;
use JSON;
use DateTime;

my $task = shift;
my $id = shift;

my $json = JSON->new->allow_nonref;

my $config = SReview::Config::Common::setup;

my %task_configs = (
        previews => [ "pubdir", "accessmethods", "s3_access_config",],
        cut => [ "workdir", "pubdir", "audio_multiplex_mode", "accessmethods", "s3_access_config","inputglob",],
        transcode => [ "pubdir", "outputdir", "output_subdirs", "workdir", "preroll_template", "postroll_template", "postroll", "apology_template", "input_profile", "output_profiles", "extra_profiles", "accessmethods", "s3_access_config", ],
        notify => [ "notify_email_template", "notify_email_subject", "notify_commands", "notify_actions", "email_template", "email_subject", "email_from", "urlbase", ],
        notify_final => [ "notify_final_email_template", "notify_final_email_subject", "notify_final_commands", "notify_final_actions", "email_template", "email_subject", "email_from", "urlbase", ],
        announce => [ "announce_email_template", "announce_email_subject", "announce_commands", "announce_actions", "email_template", "email_subject", "email_from", "urlbase", ],
        upload => [ "upload_actions", "event", "pubdir", "inputglob", "outputdir", "output_subdirs", "cleanup", "output_profiles", "extra_profiles", "accessmethods", "s3_access_config", ],
        "inject-job" => [ "input_profile", "pubdir", "inputglob", "s3_access_config", "accessmethods" ],
);

my $talk = SReview::Talk->new(talkid => $id);
my $now = DateTime->now;
my $start = DateTime->new(
	year => $now->year,
	month => $now->month,
	day => 1,
	hour => 0,
	minute => 0,
	second => 0,
);
my $secs = $now->epoch - $start->epoch;
my $jobsuffix = $talk->talkid . "-" . unpack("h*", pack("L", $secs));

my $image = "registry.salsa.debian.org/debconf-video-team/sreview/encoder";
if(exists($ENV{SREVIEW_ENCODER_IMAGE})) {
	$image = $ENV{SREVIEW_ENCODER_IMAGE};
}

my $vars = {
	task => $task,
	image => $image,
	jobsuffix => $jobsuffix,
	command => "sreview-$task",
	args => [ $talk->talkid ],
	env => [],
	secretname => $ENV{SREVIEWSECRET_NAME},
};

if($task eq "announce" || $task eq "notify_final") {
	$vars->{command} = "sreview-notify";
	push @{$vars->{args}}, $task;
}

foreach my $cfg (@{$task_configs{$task}}) {
	next if $config->is_default($cfg);
	my $val = $json->encode($config->get($cfg));
	push @{$vars->{env}}, {name => "SREVIEW_" . uc($cfg), value => $val};
}

my $template = SReview::Template->new(talk => $talk, vars => $vars);
my $data;

{
	local $/ = undef;
	open my $input, "<:encoding(UTF-8)", "/opt/sreview/template.ep";
	$data = <$input>;
	close $input;
}

my $yamldata = Load($template->string($data));

print "About to create this kubernetes object:\n";
print Dump($yamldata) . "\n";
open my $kubectl, "|-", "kubectl", "apply", "-f", "-";
print $kubectl Dump($yamldata) . "\n";
close $kubectl;
